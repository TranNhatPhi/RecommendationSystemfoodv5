#!/usr/bin/env python3
"""
Simple GPU-accelerated test for ChromaDB loading
"""

import pandas as pd
import numpy as np
from rag_vector_db import RAGVectorDatabase
import torch
import time

def simple_test():
    """Simple test to verify GPU-accelerated ChromaDB loading"""
    print("üß™ Simple GPU ChromaDB Test...")
    
    # Initialize RAG database
    rag_db = RAGVectorDatabase(use_gpu=True)
    
    # Test with small sample data first
    print(f"üéØ GPU Available: {torch.cuda.is_available()}")
    print(f"üíæ GPU Memory Available: {torch.cuda.get_device_properties(0).total_memory // 1024**2} MB")
    
    # Create test data
    test_data = [
        "Ph·ªü b√≤ H√† N·ªôi truy·ªÅn th·ªëng v·ªõi n∆∞·ªõc d√πng trong, th·ªãt b√≤ t√°i",
        "B√°nh m√¨ th·ªãt n∆∞·ªõng v·ªõi pate v√† rau s·ªëng",
        "C∆°m t·∫•m s∆∞·ªùn n∆∞·ªõng v·ªõi ch·∫£ tr·ª©ng v√† b√¨",
        "B√∫n ch·∫£ H√† N·ªôi v·ªõi th·ªãt n∆∞·ªõng th∆°m ngon",
        "G·ªèi cu·ªën t√¥m th·ªãt v·ªõi n∆∞·ªõc ch·∫•m ƒë·∫≠m ƒë√†"
    ]
    
    test_metadata = [
        {"recipe_name": "Ph·ªü b√≤", "meal_time": "breakfast", "calories": 350},
        {"recipe_name": "B√°nh m√¨", "meal_time": "breakfast", "calories": 400},
        {"recipe_name": "C∆°m t·∫•m", "meal_time": "lunch", "calories": 600},
        {"recipe_name": "B√∫n ch·∫£", "meal_time": "lunch", "calories": 450},
        {"recipe_name": "G·ªèi cu·ªën", "meal_time": "snack", "calories": 200}
    ]
    
    test_ids = [f"test_{i}" for i in range(len(test_data))]
    
    try:
        # Generate embeddings with GPU
        print("‚ö° Generating embeddings...")
        start_time = time.time()
        
        with torch.cuda.device(0):
            embeddings = rag_db.embedding_model.encode(
                test_data,
                convert_to_tensor=False,
                show_progress_bar=True,
                batch_size=16
            )
        
        embedding_time = time.time() - start_time
        print(f"‚úÖ Embeddings generated in {embedding_time:.2f}s")
        print(f"üìä Embedding shape: {np.array(embeddings).shape}")
        
        # Add to ChromaDB
        print("üíæ Adding to ChromaDB...")
        start_time = time.time()
        
        try:
            collection = rag_db.collections['recipes']
            
            # Convert embeddings to proper format
            if hasattr(embeddings, 'numpy'):
                embeddings_list = embeddings.numpy().tolist()
            elif hasattr(embeddings, 'tolist'):
                embeddings_list = embeddings.tolist()
            else:
                embeddings_list = embeddings
            
            print(f"üìä Embeddings type: {type(embeddings)}, shape: {np.array(embeddings).shape}")
            
            # Add one by one to debug
            for i in range(len(test_data)):
                collection.add(
                    documents=[test_data[i]],
                    embeddings=[embeddings_list[i]],
                    metadatas=[test_metadata[i]],
                    ids=[test_ids[i]]
                )
                print(f"  ‚úÖ Added item {i+1}")
            
            db_time = time.time() - start_time
            print(f"‚úÖ Added to ChromaDB in {db_time:.2f}s")
            
        except Exception as e:
            print(f"‚ùå ChromaDB error: {str(e)}")
            import traceback
            traceback.print_exc()
            return False
        
        # Test search
        print("üîç Testing search...")
        search_query = "m√≥n ƒÉn s√°ng Vi·ªát Nam"
        results = rag_db.search_similar(search_query, 'recipes', n_results=3)
        
        print(f"Search results for '{search_query}':")
        if results['documents'][0]:
            for i, (doc, meta) in enumerate(zip(results['documents'][0], results['metadatas'][0])):
                print(f"  {i+1}. {meta['recipe_name']}: {doc[:60]}...")
        
        # Clear GPU cache
        torch.cuda.empty_cache()
        
        print("‚úÖ Simple test completed successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    simple_test()
