import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta

# Load v√† ph√¢n t√≠ch d·ªØ li·ªáu hi·ªán t·∫°i


def analyze_current_data():
    try:
        df = pd.read_csv('interactions_encoded.csv', encoding='utf-8')
        print("‚úÖ ƒê·ªçc file CSV th√†nh c√¥ng v·ªõi UTF-8")
    except UnicodeDecodeError:
        try:
            df = pd.read_csv('interactions_encoded.csv', encoding='latin-1')
            print("‚úÖ ƒê·ªçc file CSV th√†nh c√¥ng v·ªõi Latin-1")
        except:
            df = pd.read_csv('interactions_encoded.csv', encoding='cp1252')
            print("‚úÖ ƒê·ªçc file CSV th√†nh c√¥ng v·ªõi CP1252")

    print(f"\nüìä TH·ªêNG K√ä D·ªÆ LI·ªÜU HI·ªÜN T·∫†I:")
    print(f"- T·ªïng s·ªë d√≤ng: {len(df):,}")
    print(f"- T·ªïng s·ªë c·ªôt: {len(df.columns)}")
    print(f"- S·ªë kh√°ch h√†ng unique: {df['customer_id'].nunique()}")
    print(f"- S·ªë m√≥n ƒÉn unique: {df['recipe_name'].nunique()}")
    print(f"- S·ªë interaction types: {df['interaction_type'].nunique()}")

    print(f"\nüè∑Ô∏è C√ÅC C·ªòT HI·ªÜN T·∫†I:")
    for i, col in enumerate(df.columns, 1):
        print(f"{i:2d}. {col}")

    print(f"\nüìà TH·ªêNG K√ä CHI TI·∫æT:")
    print(
        f"- Rating range: {df['rating'].min():.1f} - {df['rating'].max():.1f}")
    print(f"- Interaction types: {list(df['interaction_type'].unique())}")
    print(f"- Difficulties: {list(df['difficulty'].unique())}")
    print(f"- Meal times: {list(df['meal_time'].unique())}")

    # Ki·ªÉm tra d·ªØ li·ªáu thi·∫øu
    print(f"\n‚ùó D·ªÆ LI·ªÜU THI·∫æU:")
    missing_data = df.isnull().sum()
    for col in missing_data[missing_data > 0].index:
        print(
            f"- {col}: {missing_data[col]} d√≤ng thi·∫øu ({missing_data[col]/len(df)*100:.1f}%)")

    # Ki·ªÉm tra c√°c gi√° tr·ªã 'unknown'
    print(f"\nüîç GI√Å TR·ªä 'UNKNOWN':")
    if 'meal_time' in df.columns:
        unknown_meal = (df['meal_time'] == 'unknown').sum()
        print(
            f"- Meal time 'unknown': {unknown_meal} ({unknown_meal/len(df)*100:.1f}%)")

    if 'difficulty' in df.columns:
        unknown_diff = (df['difficulty'] == 'Kh√¥ng r√µ').sum()
        print(
            f"- Difficulty 'Kh√¥ng r√µ': {unknown_diff} ({unknown_diff/len(df)*100:.1f}%)")

    return df

# B·ªï sung c√°c tr∆∞·ªùng d·ªØ li·ªáu c·∫ßn thi·∫øt cho nutrition recommendations


def enhance_data_for_nutrition(df):
    print(f"\nüîß B·ªî SUNG D·ªÆ LI·ªÜU CHO NUTRITION RECOMMENDATIONS...")

    # 1. B·ªï sung nutrition_category
    nutrition_keywords = {
        'weight-loss': ['salad', 'g·ªèi', 'canh', 'lu·ªôc', 'h·∫•p', 'n∆∞·ªõng', 'rau', 'c√°', 'soup'],
        'blood-boost': ['th·ªãt', 'gan', 'rau d·ªÅn', 'rau ch√¢n v·ªãt', 'ƒë·∫≠u', 'tr·ª©ng', 'c√† chua'],
        'brain-boost': ['c√°', 'h·∫°t', 'tr·ª©ng', 'b∆°', 'chocolate', '√≥c ch√≥'],
        'digestive-support': ['ch√°o', 'soup', 'canh', 'yogurt', 'g·ª´ng', 'ngh·ªá', 'y·∫øn m·∫°ch'],
        'balanced': ['c∆°m', 'ph·ªü', 'b√∫n', 'b√°nh', 'm√¨']
    }

    def categorize_nutrition(recipe_name):
        recipe_lower = recipe_name.lower()
        categories = []

        for category, keywords in nutrition_keywords.items():
            if any(keyword in recipe_lower for keyword in keywords):
                categories.append(category)

        if not categories:
            return 'balanced'
        return categories[0]  # Tr·∫£ v·ªÅ category ƒë·∫ßu ti√™n n·∫øu c√≥ nhi·ªÅu

    df['nutrition_category'] = df['recipe_name'].apply(categorize_nutrition)

    # 2. B·ªï sung calories estimate
    def estimate_calories(recipe_name, meal_time, difficulty):
        base_calories = {
            'breakfast': 350,
            'lunch': 550,
            'dinner': 500,
            'unknown': 450
        }

        difficulty_multiplier = {
            'D·ªÖ': 0.9,
            'Trung b√¨nh': 1.0,
            'Kh√≥': 1.2,
            'Kh√¥ng r√µ': 1.0
        }

        # Keyword adjustments
        recipe_lower = recipe_name.lower()
        if any(word in recipe_lower for word in ['salad', 'g·ªèi', 'canh']):
            calories_adj = 0.7
        elif any(word in recipe_lower for word in ['th·ªãt', 'g√†', 'heo', 'b√≤']):
            calories_adj = 1.3
        elif any(word in recipe_lower for word in ['ch√°o', 'soup']):
            calories_adj = 0.8
        else:
            calories_adj = 1.0

        base = base_calories.get(meal_time, 450)
        multiplier = difficulty_multiplier.get(difficulty, 1.0)

        estimated = int(base * multiplier * calories_adj)
        # Add some randomness
        estimated += random.randint(-50, 50)

        return max(100, estimated)  # Minimum 100 calories

    df['estimated_calories'] = df.apply(
        lambda row: estimate_calories(
            row['recipe_name'], row['meal_time'], row['difficulty']),
        axis=1
    )

    # 3. B·ªï sung preparation_time
    def estimate_prep_time(difficulty):
        time_ranges = {
            'D·ªÖ': (15, 30),
            'Trung b√¨nh': (30, 60),
            'Kh√≥': (60, 120),
            'Kh√¥ng r√µ': (20, 45)
        }
        min_time, max_time = time_ranges.get(difficulty, (20, 45))
        return random.randint(min_time, max_time)

    df['preparation_time_minutes'] = df['difficulty'].apply(estimate_prep_time)

    # 4. B·ªï sung ingredient_count
    def estimate_ingredients(difficulty, recipe_name):
        base_counts = {
            'D·ªÖ': (3, 6),
            'Trung b√¨nh': (5, 10),
            'Kh√≥': (8, 15),
            'Kh√¥ng r√µ': (4, 8)
        }

        min_count, max_count = base_counts.get(difficulty, (4, 8))

        # Adjust based on recipe name complexity
        if len(recipe_name) > 30:
            max_count += 2

        return random.randint(min_count, max_count)

    df['ingredient_count'] = df.apply(
        lambda row: estimate_ingredients(
            row['difficulty'], row['recipe_name']),
        axis=1
    )

    # 5. B·ªï sung price_range
    def estimate_price_range(difficulty, ingredient_count):
        base_prices = {
            'D·ªÖ': (20000, 50000),
            'Trung b√¨nh': (40000, 80000),
            'Kh√≥': (60000, 120000),
            'Kh√¥ng r√µ': (30000, 60000)
        }

        min_price, max_price = base_prices.get(difficulty, (30000, 60000))

        # Adjust based on ingredient count
        price_per_ingredient = random.randint(3000, 8000)
        estimated_price = min_price + (ingredient_count * price_per_ingredient)

        return min(estimated_price, max_price)

    df['estimated_price_vnd'] = df.apply(
        lambda row: estimate_price_range(
            row['difficulty'], row['ingredient_count']),
        axis=1
    )

    # 6. C·∫£i thi·ªán meal_time cho c√°c 'unknown'
    def improve_meal_time(recipe_name, current_meal_time):
        if current_meal_time != 'unknown':
            return current_meal_time

        recipe_lower = recipe_name.lower()

        # Breakfast keywords
        if any(word in recipe_lower for word in ['b√°nh', 's·ªØa', 'tr·ª©ng', 'ch√°o', 'ph·ªü']):
            return 'breakfast'
        # Lunch keywords
        elif any(word in recipe_lower for word in ['c∆°m', 'b√∫n', 'm√¨', 'canh', 'salad']):
            return 'lunch'
        # Dinner keywords
        elif any(word in recipe_lower for word in ['th·ªãt', 'g√†', 'c√°', 't√¥m', 'n∆∞·ªõng', 'rim']):
            return 'dinner'
        else:
            return random.choice(['breakfast', 'lunch', 'dinner'])

    df['meal_time'] = df.apply(
        lambda row: improve_meal_time(row['recipe_name'], row['meal_time']),
        axis=1
    )

    # Update meal_time_code accordingly
    meal_time_mapping = {'breakfast': 0, 'lunch': 2, 'dinner': 1}
    df['meal_time_code'] = df['meal_time'].map(meal_time_mapping).fillna(3)

    # 7. C·∫£i thi·ªán difficulty cho 'Kh√¥ng r√µ'
    def improve_difficulty(recipe_name, current_difficulty):
        if current_difficulty != 'Kh√¥ng r√µ':
            return current_difficulty

        recipe_lower = recipe_name.lower()

        # Easy indicators
        if any(word in recipe_lower for word in ['salad', 'g·ªèi', 'lu·ªôc', 'h·∫•p']):
            return 'D·ªÖ'
        # Hard indicators
        elif any(word in recipe_lower for word in ['n∆∞·ªõng', 'rim', 'om', 'braised']):
            return 'Trung b√¨nh'
        else:
            return random.choice(['D·ªÖ', 'Trung b√¨nh'])

    df['difficulty'] = df.apply(
        lambda row: improve_difficulty(row['recipe_name'], row['difficulty']),
        axis=1
    )

    # Update difficulty_code
    difficulty_mapping = {'D·ªÖ': 0, 'Trung b√¨nh': 3, 'Kh√≥': 1}
    df['difficulty_code'] = df['difficulty'].map(difficulty_mapping).fillna(2)

    return df

# T·∫°o th√™m d·ªØ li·ªáu ƒëa d·∫°ng


def add_more_diverse_data(df):
    print(f"\n‚ûï TH√äM D·ªÆ LI·ªÜU ƒêA D·∫†NG...")

    # T·∫°o th√™m kh√°ch h√†ng m·ªõi
    max_customer_num = max([int(cid.replace('CUS', ''))
                           for cid in df['customer_id'].unique()])
    new_customers = [f"CUS{i:05d}" for i in range(
        max_customer_num + 1, max_customer_num + 51)]

    # T·∫°o th√™m m√≥n ƒÉn m·ªõi
    additional_recipes = [
        ("Salad rau c·ªß qu·∫£", "https://monngonmoingay.com/salad-rau-cu-qua/", "weight-loss"),
        ("Ch√°o y·∫øn m·∫°ch h·∫°t chia",
         "https://monngonmoingay.com/chao-yen-mach/", "digestive-support"),
        ("C√° h·ªìi n∆∞·ªõng b∆° t·ªèi", "https://monngonmoingay.com/ca-hoi-nuong/", "brain-boost"),
        ("Canh rau d·ªÅn n·∫•u t√¥m", "https://monngonmoingay.com/canh-rau-den/", "blood-boost"),
        ("Th·ªãt b√≤ x√†o s√∫p l∆°", "https://monngonmoingay.com/thit-bo-xao-sup-lo/", "balanced"),
        ("Smoothie xanh detox", "https://monngonmoingay.com/smoothie-xanh/", "weight-loss"),
        ("G√† n∆∞·ªõng m·∫≠t ong", "https://monngonmoingay.com/ga-nuong-mat-ong/", "balanced"),
        ("Canh chua c√° b√¥ng lau",
         "https://monngonmoingay.com/canh-chua-ca/", "digestive-support"),
        ("B√°nh m√¨ sandwich healthy",
         "https://monngonmoingay.com/banh-mi-healthy/", "weight-loss"),
        ("T√¥m rang me", "https://monngonmoingay.com/tom-rang-me/", "balanced")
    ]

    new_rows = []
    interaction_types = ['like', 'view', 'save', 'cook', 'rate']
    comments = [
        "M√≥n ƒÉn tuy·ªát v·ªùi!",
        "R·∫•t ngon v√† b·ªï d∆∞·ª°ng",
        "H∆∞∆°ng v·ªã h√†i h√≤a, r·∫•t ƒë√°ng th·ª≠",
        "M√≥n ƒÉn ·ªïn, c√≥ th·ªÉ c·∫£i thi·ªán th√™m m·ªôt ch√∫t",
        "Th∆∞·ªüng th·ª©c tuy·ªát v·ªùi, m√≥n ƒÉn th·∫≠t s·ª± xu·∫•t s·∫Øc!",
        "Kh√¥ng th·ª±c s·ª± ·∫•n t∆∞·ª£ng, c·∫ßn tinh ch·ªânh l·∫°i h∆∞∆°ng v·ªã",
        "Kh√≥ th∆∞·ªüng th·ª©c, m√≥n ch∆∞a ƒë·∫°t y√™u c·∫ßu"
    ]

    for customer in new_customers[:30]:  # Ch·ªâ th√™m 30 kh√°ch h√†ng m·ªõi
        user_index = df['user_index'].max() + 1

        # M·ªói kh√°ch h√†ng c√≥ 3-8 interactions
        num_interactions = random.randint(3, 8)

        for _ in range(num_interactions):
            # Ch·ªçn ng·∫´u nhi√™n t·ª´ m√≥n ƒÉn hi·ªán c√≥ ho·∫∑c m√≥n m·ªõi
            if random.random() < 0.3:  # 30% chance m√≥n m·ªõi
                recipe_info = random.choice(additional_recipes)
                recipe_name, recipe_url, nutrition_cat = recipe_info
                item_index = df['item_index'].max() + random.randint(1, 10)
            else:  # 70% chance m√≥n hi·ªán c√≥
                existing_recipe = df.sample(1).iloc[0]
                recipe_name = existing_recipe['recipe_name']
                recipe_url = existing_recipe['recipe_url']
                nutrition_cat = existing_recipe.get(
                    'nutrition_category', 'balanced')
                item_index = existing_recipe['item_index']

            interaction_type = random.choice(interaction_types)
            rating = round(random.uniform(1.5, 5.0), 1)

            # Generate random date within last year
            start_date = datetime.now() - timedelta(days=365)
            random_date = start_date + timedelta(days=random.randint(0, 365))

            comment = random.choice(comments)

            # Generate other fields
            difficulty = random.choice(['D·ªÖ', 'Trung b√¨nh', 'Kh√≥'])
            meal_time = random.choice(['breakfast', 'lunch', 'dinner'])

            new_row = {
                'customer_id': customer,
                'recipe_name': recipe_name,
                'recipe_url': recipe_url,
                'interaction_type': interaction_type,
                'rating': rating,
                'interaction_date': random_date.strftime('%Y-%m-%d'),
                'comment': comment,
                'user_index': user_index,
                'item_index': item_index,
                'content_score': round(random.uniform(0.1, 0.4), 10),
                'cf_score': round(random.uniform(2.5, 3.5), 10),
                'interaction_type_code': interaction_types.index(interaction_type),
                'difficulty': difficulty,
                'difficulty_code': ['D·ªÖ', 'Kh√≥', 'Kh√¥ng r√µ', 'Trung b√¨nh'].index(difficulty),
                'meal_time': meal_time,
                'meal_time_code': ['breakfast', 'dinner', 'lunch'].index(meal_time),
                'nutrition_category': nutrition_cat,
                'estimated_calories': random.randint(200, 800),
                'preparation_time_minutes': random.randint(15, 90),
                'ingredient_count': random.randint(3, 12),
                'estimated_price_vnd': random.randint(20000, 100000)
            }

            new_rows.append(new_row)

    # Th√™m c√°c d√≤ng m·ªõi v√†o DataFrame
    new_df = pd.DataFrame(new_rows)
    enhanced_df = pd.concat([df, new_df], ignore_index=True)

    print(f"‚úÖ ƒê√£ th√™m {len(new_rows)} d√≤ng d·ªØ li·ªáu m·ªõi")

    return enhanced_df


def main():
    print("üîç PH√ÇN T√çCH V√Ä B·ªî SUNG D·ªÆ LI·ªÜU CSV")
    print("=" * 50)

    # Ph√¢n t√≠ch d·ªØ li·ªáu hi·ªán t·∫°i
    df = analyze_current_data()

    # B·ªï sung d·ªØ li·ªáu cho nutrition recommendations
    enhanced_df = enhance_data_for_nutrition(df)

    # Th√™m d·ªØ li·ªáu ƒëa d·∫°ng
    final_df = add_more_diverse_data(enhanced_df)

    # L∆∞u file m·ªõi
    output_file = 'interactions_enhanced_final.csv'
    final_df.to_csv(output_file, index=False, encoding='utf-8')

    print(f"\n‚úÖ HO√ÄN TH√ÄNH!")
    print(f"üìÑ File ƒë√£ ƒë∆∞·ª£c l∆∞u: {output_file}")
    print(f"üìä T·ªïng s·ªë d√≤ng: {len(final_df):,}")
    print(f"üë• T·ªïng s·ªë kh√°ch h√†ng: {final_df['customer_id'].nunique()}")
    print(f"üçΩÔ∏è T·ªïng s·ªë m√≥n ƒÉn: {final_df['recipe_name'].nunique()}")

    print(f"\nüÜï C√ÅC C·ªòT M·ªöI ƒê√É TH√äM:")
    new_columns = ['nutrition_category', 'estimated_calories', 'preparation_time_minutes',
                   'ingredient_count', 'estimated_price_vnd']
    for i, col in enumerate(new_columns, 1):
        print(f"{i}. {col}")

    print(f"\nüìà PH√ÇN B·ªê NUTRITION CATEGORIES:")
    nutrition_dist = final_df['nutrition_category'].value_counts()
    for category, count in nutrition_dist.items():
        print(f"- {category}: {count} ({count/len(final_df)*100:.1f}%)")


if __name__ == "__main__":
    main()
