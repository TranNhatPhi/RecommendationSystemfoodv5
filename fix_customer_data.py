#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ s·ª≠a ch·ªØa v√† chu·∫©n h√≥a d·ªØ li·ªáu customer cho ph√π h·ª£p v·ªõi form ƒëƒÉng k√Ω
ƒê·∫£m b·∫£o t√≠nh nh·∫•t qu√°n v√† ƒë√∫ng ƒë·∫Øn c·ªßa d·ªØ li·ªáu
"""

import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta
import os


def fix_customer_data():
    """S·ª≠a ch·ªØa d·ªØ li·ªáu customer ƒë·ªÉ ph√π h·ª£p v·ªõi form ƒëƒÉng k√Ω"""

    print("üîß B·∫ÆT ƒê·∫¶U S·ª¨A CH·ªÆA D·ªÆ LI·ªÜU CUSTOMER")
    print("=" * 50)

    # ƒê·ªçc d·ªØ li·ªáu customer
    df = pd.read_csv('customers_data.csv', encoding='utf-8')
    print(f"üìä S·ªë l∆∞·ª£ng customer: {len(df)}")

    # Backup d·ªØ li·ªáu g·ªëc
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = f"customers_data_backup_{timestamp}.csv"
    df.to_csv(backup_file, index=False, encoding='utf-8')
    print(f"üíæ ƒê√£ backup: {backup_file}")

    # Danh s√°ch dietary restrictions ph√π h·ª£p v·ªõi form
    valid_dietary_restrictions = [
        'vegetarian',  # ƒÇn chay
        'vegan',       # Thu·∫ßn chay
        'buddhist_vegetarian',  # Chay Ph·∫≠t gi√°o
        'no_seafood',  # Kh√¥ng h·∫£i s·∫£n
        'no_pork',     # Kh√¥ng th·ªãt heo
        'no_beef',     # Kh√¥ng th·ªãt b√≤
        'low_sodium',  # √çt mu·ªëi/m·∫∑n
        'diabetic',    # Ti·ªÉu ƒë∆∞·ªùng (√≠t ƒë∆∞·ªùng)
        'no_spicy',    # Kh√¥ng ƒÉn cay
        'light_meals'  # Th√≠ch m√≥n nh·∫π
    ]

    # Danh s√°ch health goals h·ª£p l·ªá
    valid_health_goals = [
        'weight_loss',    # Gi·∫£m c√¢n
        'muscle_gain',    # TƒÉng c∆°
        'healthy_eating',  # ƒÇn u·ªëng l√†nh m·∫°nh
        'maintain_weight'  # Duy tr√¨ c√¢n n·∫∑ng
    ]

    # Danh s√°ch regional preferences
    valid_regional_preferences = [
        'northern',     # Mi·ªÅn B·∫Øc
        'central',      # Mi·ªÅn Trung
        'southern',     # Mi·ªÅn Nam
        'all_regions'   # T·∫•t c·∫£ v√πng mi·ªÅn
    ]

    # Danh s√°ch meal times
    valid_meal_times = [
        'breakfast',  # S√°ng
        'lunch',      # Tr∆∞a
        'dinner',     # T·ªëi
        'snack'       # ƒÇn v·∫∑t
    ]

    # Danh s√°ch cooking skill levels
    valid_cooking_skills = ['beginner', 'intermediate', 'advanced', 'expert']

    # Danh s√°ch budget ranges
    valid_budget_ranges = ['low', 'medium', 'high']

    # S·ª≠a ch·ªØa d·ªØ li·ªáu
    for idx, row in df.iterrows():
        # 1. S·ª≠a gender data
        if pd.isna(row['gender']) or row['gender'] not in ['male', 'female', 'other']:
            # D·ª±a v√†o t√™n ƒë·ªÉ ƒëo√°n gi·ªõi t√≠nh
            if any(word in str(row['full_name']).lower() for word in ['th·ªã', 'n·ªØ']):
                df.at[idx, 'gender'] = 'female'
            elif any(word in str(row['full_name']).lower() for word in ['vƒÉn', 'nam']):
                df.at[idx, 'gender'] = 'male'
            else:
                df.at[idx, 'gender'] = random.choice(['male', 'female'])

        # 2. Th√™m tu·ªïi n·∫øu thi·∫øu
        if pd.isna(row['age']) or row['age'] == '':
            age_group = row['age_group']
            if age_group == '18-24':
                df.at[idx, 'age'] = random.randint(18, 24)
            elif age_group == '25-34':
                df.at[idx, 'age'] = random.randint(25, 34)
            elif age_group == '35-44':
                df.at[idx, 'age'] = random.randint(35, 44)
            elif age_group == '45-54':
                df.at[idx, 'age'] = random.randint(45, 54)
            elif age_group == '55-64':
                df.at[idx, 'age'] = random.randint(55, 64)
            elif age_group == '65+':
                df.at[idx, 'age'] = random.randint(65, 80)
            else:
                df.at[idx, 'age'] = random.randint(25, 45)

        # 3. T·∫°o email v√† phone n·∫øu thi·∫øu
        if pd.isna(row['email']) or row['email'] == '':
            name_parts = str(row['full_name']).lower().replace(
                ' ', '').replace('th·ªã', '').replace('vƒÉn', '')
            df.at[idx,
                  'email'] = f"{name_parts}{random.randint(100, 999)}@email.com"

        if pd.isna(row['phone']) or row['phone'] == '':
            df.at[idx, 'phone'] = f"09{random.randint(10000000, 99999999)}"

        # 4. Th√™m health_goals
        if pd.isna(row['health_goals']) or row['health_goals'] == '':
            # Ch·ªçn 1-2 health goals ng·∫´u nhi√™n
            num_goals = random.choice([1, 2])
            selected_goals = random.sample(valid_health_goals, num_goals)
            df.at[idx, 'health_goals'] = ','.join(selected_goals)

        # 5. Th√™m dietary_restrictions
        if pd.isna(row['dietary_restrictions']) or row['dietary_restrictions'] == '':
            # 70% kh√¥ng c√≥ h·∫°n ch·∫ø, 30% c√≥ h·∫°n ch·∫ø
            if random.random() < 0.3:
                num_restrictions = random.choice([1, 2])
                selected_restrictions = random.sample(
                    valid_dietary_restrictions, num_restrictions)
                # ƒê·∫£m b·∫£o kh√¥ng ch·ªçn c√πng l√∫c vegetarian, vegan, v√† buddhist_vegetarian
                veg_options = ['vegetarian', 'vegan', 'buddhist_vegetarian']
                veg_in_selection = [
                    r for r in selected_restrictions if r in veg_options]
                if len(veg_in_selection) > 1:
                    selected_restrictions = [
                        r for r in selected_restrictions if r not in veg_options]
                    selected_restrictions.append(random.choice(veg_options))
                df.at[idx, 'dietary_restrictions'] = ','.join(
                    selected_restrictions)
            else:
                df.at[idx, 'dietary_restrictions'] = ''

        # 6. Th√™m preferred_cuisines (lu√¥n l√† vietnamese)
        df.at[idx, 'preferred_cuisines'] = 'vietnamese'

        # 7. Th√™m regional_preferences
        if pd.isna(row.get('regional_preferences', '')) or row.get('regional_preferences', '') == '':
            # D·ª±a v√†o region ƒë·ªÉ ch·ªçn regional preference
            region = str(row['region']).lower()
            if any(city in region for city in ['h√† n·ªôi', 'h·∫£i ph√≤ng', 'h·∫° long', 'ninh b√¨nh']):
                regional_pref = 'northern'
            elif any(city in region for city in ['hu·∫ø', 'ƒë√† n·∫µng', 'h·ªôi an', 'qu·∫£ng nam']):
                regional_pref = 'central'
            elif any(city in region for city in ['tp.hcm', 's√†i g√≤n', 'v≈©ng t√†u', 'c·∫ßn th∆°', 'ƒë√† l·∫°t']):
                regional_pref = 'southern'
            else:
                regional_pref = random.choice(valid_regional_preferences)

            # Th√™m c·ªôt regional_preferences n·∫øu ch∆∞a c√≥
            if 'regional_preferences' not in df.columns:
                df['regional_preferences'] = ''
            df.at[idx, 'regional_preferences'] = regional_pref

        # 8. Th√™m preferred_meal_times
        if pd.isna(row['preferred_meal_times']) or row['preferred_meal_times'] == '':
            num_meals = random.choice([2, 3])
            selected_meals = random.sample(valid_meal_times, num_meals)
            df.at[idx, 'preferred_meal_times'] = ','.join(selected_meals)

        # 9. Th√™m cooking_skill_level
        if pd.isna(row['cooking_skill_level']) or row['cooking_skill_level'] == '':
            df.at[idx, 'cooking_skill_level'] = random.choice(
                valid_cooking_skills)

        # 10. Th√™m budget_range
        if pd.isna(row['budget_range']) or row['budget_range'] == '':
            df.at[idx, 'budget_range'] = random.choice(valid_budget_ranges)

        # 11. Th√™m occupation n·∫øu thi·∫øu
        if pd.isna(row['occupation']) or row['occupation'] == '':
            occupations = ['Sinh vi√™n', 'Nh√¢n vi√™n vƒÉn ph√≤ng', 'Gi√°o vi√™n', 'K·∫ø to√°n', 'B√°n h√†ng',
                           'Y t√°', 'K·ªπ s∆∞', 'Freelancer', 'N·ªôi tr·ª£', 'H∆∞u tr√≠']
            df.at[idx, 'occupation'] = random.choice(occupations)

        # 12. Th√™m location n·∫øu thi·∫øu
        if pd.isna(row['location']) or row['location'] == '':
            df.at[idx, 'location'] = row['region']

        # 13. ƒê·∫£m b·∫£o status
        if pd.isna(row['status']) or row['status'] == '':
            df.at[idx, 'status'] = 'active'

    # Th√™m c·ªôt regional_preferences n·∫øu ch∆∞a c√≥
    if 'regional_preferences' not in df.columns:
        df['regional_preferences'] = ''
        for idx in range(len(df)):
            df.at[idx, 'regional_preferences'] = random.choice(
                valid_regional_preferences)

    # L∆∞u d·ªØ li·ªáu ƒë√£ s·ª≠a
    df.to_csv('customers_data.csv', index=False, encoding='utf-8')

    print("‚úÖ HO√ÄN TH√ÄNH S·ª¨A CH·ªÆA D·ªÆ LI·ªÜU!")
    print(f"üìä S·ªë l∆∞·ª£ng customer ƒë√£ s·ª≠a: {len(df)}")
    print("üîç Th·ªëng k√™ sau khi s·ª≠a:")

    # Th·ªëng k√™
    print(f"  - Email: {df['email'].notna().sum()}/{len(df)}")
    print(f"  - Phone: {df['phone'].notna().sum()}/{len(df)}")
    print(f"  - Age: {df['age'].notna().sum()}/{len(df)}")
    print(f"  - Health goals: {df['health_goals'].notna().sum()}/{len(df)}")
    print(
        f"  - Dietary restrictions: {(df['dietary_restrictions'] != '').sum()}/{len(df)}")
    print(
        f"  - Regional preferences: {df['regional_preferences'].notna().sum()}/{len(df)}")

    return df


def validate_customer_data(df):
    """Ki·ªÉm tra t√≠nh nh·∫•t qu√°n c·ªßa d·ªØ li·ªáu"""
    print("\nüîç KI·ªÇM TRA T√çNH NH·∫§T QU√ÅN:")

    # Ki·ªÉm tra dietary restrictions
    valid_restrictions = ['vegetarian', 'vegan', 'buddhist_vegetarian', 'no_seafood',
                          'no_pork', 'no_beef', 'low_sodium', 'diabetic', 'no_spicy', 'light_meals']

    invalid_count = 0
    for idx, row in df.iterrows():
        if pd.notna(row['dietary_restrictions']) and row['dietary_restrictions'] != '':
            restrictions = [r.strip() for r in str(
                row['dietary_restrictions']).split(',')]
            invalid_restrictions = [
                r for r in restrictions if r not in valid_restrictions]
            if invalid_restrictions:
                print(
                    f"  ‚ö†Ô∏è Customer {row['customer_id']}: Invalid restrictions {invalid_restrictions}")
                invalid_count += 1

    if invalid_count == 0:
        print("  ‚úÖ T·∫•t c·∫£ dietary restrictions h·ª£p l·ªá")

    # Ki·ªÉm tra vegetarian conflicts
    conflict_count = 0
    for idx, row in df.iterrows():
        if pd.notna(row['dietary_restrictions']) and row['dietary_restrictions'] != '':
            restrictions = [r.strip() for r in str(
                row['dietary_restrictions']).split(',')]
            veg_options = [r for r in restrictions if r in [
                'vegetarian', 'vegan', 'buddhist_vegetarian']]
            if len(veg_options) > 1:
                print(
                    f"  ‚ö†Ô∏è Customer {row['customer_id']}: Multiple vegetarian options {veg_options}")
                conflict_count += 1

    if conflict_count == 0:
        print("  ‚úÖ Kh√¥ng c√≥ xung ƒë·ªôt vegetarian options")

    print(f"üìà D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a v√† nh·∫•t qu√°n!")


if __name__ == "__main__":
    # S·ª≠a ch·ªØa d·ªØ li·ªáu
    df = fix_customer_data()

    # Ki·ªÉm tra t√≠nh nh·∫•t qu√°n
    validate_customer_data(df)

    print("\nüéâ HO√ÄN TH√ÄNH T·∫§T C·∫¢!")
