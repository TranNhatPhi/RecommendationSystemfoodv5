#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ t·∫°o database ph√¢n lo·∫°i m√≥n ƒÉn theo dietary restrictions
Gi√∫p h·ªá th·ªëng recommendation filter ch√≠nh x√°c h∆°n
"""

import pandas as pd
import json


def create_food_classification():
    """T·∫°o database ph√¢n lo·∫°i m√≥n ƒÉn"""

    print("üçΩÔ∏è T·∫†O DATABASE PH√ÇN LO·∫†I M√ìN ƒÇN")
    print("=" * 40)

    # ƒê·ªçc d·ªØ li·ªáu interactions ƒë·ªÉ l·∫•y danh s√°ch m√≥n ƒÉn
    interactions_df = pd.read_csv(
        'interactions_enhanced_final.csv', encoding='utf-8')
    unique_foods = interactions_df['recipe_name'].unique()

    print(f"üìä T·ªïng s·ªë m√≥n ƒÉn: {len(unique_foods)}")

    # T·∫°o classification database
    food_classification = {}

    # ƒê·ªãnh nghƒ©a keywords ƒë·ªÉ ph√¢n lo·∫°i
    meat_keywords = [
        'th·ªãt', 'heo', 'b√≤', 'g√†', 'v·ªãt', 's∆∞·ªùn', 'nem', 'ch·∫£', 'l·∫°p x∆∞·ªüng',
        'x√∫c x√≠ch', 'th·ªãt n∆∞·ªõng', 'th·ªãt kho', 'th·ªãt x√†o', 'g√† lu·ªôc', 'g√† n∆∞·ªõng',
        'b√≤ n∆∞·ªõng', 'b√≤ kho', 'heo quay', 'ch·∫£ c√°', 'thƒÉn', 'ba ch·ªâ'
    ]

    seafood_keywords = [
        't√¥m', 'cua', 'c√°', 'm·ª±c', 'ngh√™u', 's√≤', '·ªëc', 'h√†u', 't√©p',
        'ch·∫£ c√°', 'c√° n∆∞·ªõng', 'c√° kho', 't√¥m n∆∞·ªõng', 'cua rang', 'm·ª±c x√†o',
        'h·∫£i s·∫£n', 'c√° thu', 'c√° ng·ª´', 'c√° h·ªìi'
    ]

    dairy_keywords = [
        's·ªØa', 'kem', 'ph√¥ mai', 'b∆°', 'yaourt', 's·ªØa chua', 'cheese',
        'cream', 'milk', 'yogurt'
    ]

    egg_keywords = [
        'tr·ª©ng', 'tr·ª©ng g√†', 'tr·ª©ng v·ªãt', 'tr·ª©ng c√∫t', '·ªëp la', 'tr·ª©ng chi√™n',
        'tr·ª©ng lu·ªôc', 'b√°nh flan'
    ]

    spicy_keywords = [
        'cay', '·ªõt', 'ti√™u', 't·∫Øc', 'kim chi', 'chua cay', 'cay n·ªìng',
        '·ªõt hi·ªÉm', 'b√∫n b√≤ hu·∫ø', 'm√¨ qu·∫£ng'
    ]

    sweet_keywords = [
        'b√°nh ng·ªçt', 'k·∫πo', 'ƒë∆∞·ªùng', 'm·∫≠t ong', 'b√°nh kem', 'chocolate',
        'b√°nh quy ng·ªçt', 'b√°nh su kem', 'b√°nh flan', 'ch√®', 'kem'
    ]

    # C√°c m√≥n ƒÉn chay ƒë∆∞·ª£c x√°c ƒë·ªãnh t√≠ch c·ª±c
    vegetarian_positive = [
        'ch√®', 'b√°nh ch∆∞ng chay', 'nem chay', 'ph·ªü chay', 'b√∫n chay',
        'c∆°m chay', 'canh chua chay', 'ƒë·∫≠u ph·ª•', 'mƒÉng', 'n·∫•m',
        'rau mu·ªëng', 'c·∫£i th·∫£o', 's√∫p l∆°', 'c√† r√≥t', 'ƒë·∫≠u que'
    ]

    # Ph√¢n lo·∫°i t·ª´ng m√≥n ƒÉn
    for food in unique_foods:
        food_lower = food.lower()

        classification = {
            'name': food,
            'is_vegetarian': True,  # M·∫∑c ƒë·ªãnh l√† chay
            'is_vegan': True,
            'is_buddhist_vegetarian': True,
            'contains_meat': False,
            'contains_seafood': False,
            'contains_dairy': False,
            'contains_eggs': False,
            'is_spicy': False,
            'is_sweet': False,
            'dietary_tags': []
        }

        # Ki·ªÉm tra th·ªãt
        if any(keyword in food_lower for keyword in meat_keywords):
            classification['contains_meat'] = True
            classification['is_vegetarian'] = False
            classification['is_vegan'] = False
            classification['is_buddhist_vegetarian'] = False
            classification['dietary_tags'].append('contains_meat')

        # Ki·ªÉm tra h·∫£i s·∫£n
        if any(keyword in food_lower for keyword in seafood_keywords):
            classification['contains_seafood'] = True
            classification['is_vegetarian'] = False
            classification['is_vegan'] = False
            classification['is_buddhist_vegetarian'] = False
            classification['dietary_tags'].append('contains_seafood')

        # Ki·ªÉm tra s·ªØa
        if any(keyword in food_lower for keyword in dairy_keywords):
            classification['contains_dairy'] = True
            classification['is_vegan'] = False
            classification['dietary_tags'].append('contains_dairy')

        # Ki·ªÉm tra tr·ª©ng
        if any(keyword in food_lower for keyword in egg_keywords):
            classification['contains_eggs'] = True
            classification['is_vegan'] = False
            classification['dietary_tags'].append('contains_eggs')

        # Ki·ªÉm tra cay
        if any(keyword in food_lower for keyword in spicy_keywords):
            classification['is_spicy'] = True
            classification['dietary_tags'].append('spicy')

        # Ki·ªÉm tra ng·ªçt
        if any(keyword in food_lower for keyword in sweet_keywords):
            classification['is_sweet'] = True
            classification['dietary_tags'].append('sweet')

        # Ki·ªÉm tra h√†nh t·ªèi (c·∫•m trong chay Ph·∫≠t gi√°o)
        if any(keyword in food_lower for keyword in ['h√†nh', 't·ªèi', 'ki·ªáu', 'rƒÉm']):
            classification['is_buddhist_vegetarian'] = False
            classification['dietary_tags'].append('contains_pungent')

        # Th√™m v√†o database
        food_classification[food] = classification

    # Th·ªëng k√™
    vegetarian_count = sum(
        1 for f in food_classification.values() if f['is_vegetarian'])
    vegan_count = sum(1 for f in food_classification.values() if f['is_vegan'])
    buddhist_veg_count = sum(
        1 for f in food_classification.values() if f['is_buddhist_vegetarian'])
    meat_count = sum(1 for f in food_classification.values()
                     if f['contains_meat'])
    seafood_count = sum(
        1 for f in food_classification.values() if f['contains_seafood'])

    print(f"\nüìä TH·ªêNG K√ä PH√ÇN LO·∫†I:")
    print(
        f"  ü•¨ Vegetarian: {vegetarian_count}/{len(unique_foods)} ({vegetarian_count/len(unique_foods)*100:.1f}%)")
    print(
        f"  üå± Vegan: {vegan_count}/{len(unique_foods)} ({vegan_count/len(unique_foods)*100:.1f}%)")
    print(
        f"  üßò Buddhist Vegetarian: {buddhist_veg_count}/{len(unique_foods)} ({buddhist_veg_count/len(unique_foods)*100:.1f}%)")
    print(
        f"  ü•© Contains Meat: {meat_count}/{len(unique_foods)} ({meat_count/len(unique_foods)*100:.1f}%)")
    print(
        f"  üêü Contains Seafood: {seafood_count}/{len(unique_foods)} ({seafood_count/len(unique_foods)*100:.1f}%)")

    # L∆∞u database
    with open('food_classification.json', 'w', encoding='utf-8') as f:
        json.dump(food_classification, f, ensure_ascii=False, indent=2)

    print(f"\nüíæ ƒê√£ l∆∞u database: food_classification.json")

    # T·∫°o danh s√°ch m√≥n chay
    vegetarian_foods = [
        name for name, data in food_classification.items() if data['is_vegetarian']]
    vegan_foods = [name for name,
                   data in food_classification.items() if data['is_vegan']]
    buddhist_foods = [name for name, data in food_classification.items(
    ) if data['is_buddhist_vegetarian']]

    print(f"\nü•¨ C√ÅC M√ìN CHAY (Top 10):")
    for i, food in enumerate(vegetarian_foods[:10], 1):
        print(f"  {i:2d}. {food}")

    print(f"\nüå± C√ÅC M√ìN THU·∫¶N CHAY (Top 10):")
    for i, food in enumerate(vegan_foods[:10], 1):
        print(f"  {i:2d}. {food}")

    return food_classification


def create_recommendation_filter():
    """T·∫°o helper function ƒë·ªÉ filter recommendations"""

    filter_code = '''
def filter_by_dietary_restrictions(df, dietary_restrictions):
    """Filter dataframe based on dietary restrictions using classification database"""
    import json
    
    try:
        with open('food_classification.json', 'r', encoding='utf-8') as f:
            food_db = json.load(f)
    except FileNotFoundError:
        print("‚ö†Ô∏è Food classification database not found!")
        return df
    
    if not dietary_restrictions:
        return df
    
    filtered_df = df.copy()
    
    for restriction in dietary_restrictions:
        if restriction == 'vegetarian':
            # Ch·ªâ gi·ªØ l·∫°i m√≥n chay
            vegetarian_foods = [name for name, data in food_db.items() if data['is_vegetarian']]
            filtered_df = filtered_df[filtered_df['recipe_name'].isin(vegetarian_foods)]
            
        elif restriction == 'vegan':
            # Ch·ªâ gi·ªØ l·∫°i m√≥n thu·∫ßn chay
            vegan_foods = [name for name, data in food_db.items() if data['is_vegan']]
            filtered_df = filtered_df[filtered_df['recipe_name'].isin(vegan_foods)]
            
        elif restriction == 'buddhist_vegetarian':
            # Ch·ªâ gi·ªØ l·∫°i m√≥n chay Ph·∫≠t gi√°o
            buddhist_foods = [name for name, data in food_db.items() if data['is_buddhist_vegetarian']]
            filtered_df = filtered_df[filtered_df['recipe_name'].isin(buddhist_foods)]
            
        elif restriction == 'no_seafood':
            # Lo·∫°i b·ªè m√≥n c√≥ h·∫£i s·∫£n
            seafood_foods = [name for name, data in food_db.items() if data['contains_seafood']]
            filtered_df = filtered_df[~filtered_df['recipe_name'].isin(seafood_foods)]
            
        elif restriction == 'no_pork':
            # Lo·∫°i b·ªè m√≥n c√≥ th·ªãt heo
            pork_foods = [name for name, data in food_db.items() 
                         if any('heo' in tag for tag in data.get('dietary_tags', []))]
            filtered_df = filtered_df[~filtered_df['recipe_name'].isin(pork_foods)]
            
        elif restriction == 'no_beef':
            # Lo·∫°i b·ªè m√≥n c√≥ th·ªãt b√≤
            beef_foods = [name for name, data in food_db.items() 
                         if any('b√≤' in tag for tag in data.get('dietary_tags', []))]
            filtered_df = filtered_df[~filtered_df['recipe_name'].isin(beef_foods)]
            
        elif restriction == 'no_spicy':
            # Lo·∫°i b·ªè m√≥n cay
            spicy_foods = [name for name, data in food_db.items() if data['is_spicy']]
            filtered_df = filtered_df[~filtered_df['recipe_name'].isin(spicy_foods)]
            
        elif restriction == 'diabetic':
            # Lo·∫°i b·ªè m√≥n ng·ªçt
            sweet_foods = [name for name, data in food_db.items() if data['is_sweet']]
            filtered_df = filtered_df[~filtered_df['recipe_name'].isin(sweet_foods)]
    
    return filtered_df
'''

    with open('dietary_filter_helper.py', 'w', encoding='utf-8') as f:
        f.write(filter_code)

    print(f"üíæ ƒê√£ t·∫°o helper function: dietary_filter_helper.py")


if __name__ == "__main__":
    # T·∫°o database ph√¢n lo·∫°i
    food_db = create_food_classification()

    # T·∫°o helper function
    create_recommendation_filter()

    print(f"\nüéâ HO√ÄN TH√ÄNH! Database v√† helper functions ƒë√£ s·∫µn s√†ng.")
