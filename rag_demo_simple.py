"""
Simple RAG demo with manual data
"""
import chromadb
from sentence_transformers import SentenceTransformer
import pandas as pd
import os

def create_simple_rag_demo():
    """Create a simple RAG demo with manual data"""
    print("üöÄ Creating Simple RAG Demo...")
    
    # Initialize components
    model = SentenceTransformer('paraphrase-multilingual-mpnet-base-v2')
    client = chromadb.PersistentClient(path="./simple_rag_demo")
    
    # Create collections
    recipes_collection = client.get_or_create_collection(name="recipes_demo")
    nutrition_collection = client.get_or_create_collection(name="nutrition_demo")
    
    # Manual recipe data
    recipe_data = [
        {
            "text": "Salad rau xanh v·ªõi ·ª©c g√† n∆∞·ªõng - m√≥n ƒÉn √≠t calo, gi√†u protein, t·ªët cho vi·ªác gi·∫£m c√¢n. Cung c·∫•p vitamin v√† kho√°ng ch·∫•t thi·∫øt y·∫øu.",
            "name": "Salad ·ª©c g√†",
            "category": "gi·∫£m c√¢n",
            "calories": "250"
        },
        {
            "text": "Ch√°o y·∫øn m·∫°ch v·ªõi tr√°i c√¢y - b·ªØa s√°ng b·ªï d∆∞·ª°ng, gi√†u ch·∫•t x∆°, gi√∫p no l√¢u v√† ki·ªÉm so√°t c√¢n n·∫∑ng hi·ªáu qu·∫£.",
            "name": "Ch√°o y·∫øn m·∫°ch tr√°i c√¢y", 
            "category": "gi·∫£m c√¢n",
            "calories": "200"
        },
        {
            "text": "C∆°m g·∫°o l·ª©c v·ªõi th·ªãt b√≤ n∆∞·ªõng v√† rau c·ªß - m√≥n ƒÉn c√¢n b·∫±ng dinh d∆∞·ª°ng, gi√†u protein v√† carbohydrate ph·ª©c t·∫°p.",
            "name": "C∆°m g·∫°o l·ª©c th·ªãt b√≤",
            "category": "tƒÉng c√¢n",
            "calories": "450"
        },
        {
            "text": "Sinh t·ªë b∆° chu·ªëi v·ªõi s·ªØa h·∫°t - ƒë·ªì u·ªëng gi√†u calo l√†nh m·∫°nh, protein v√† ch·∫•t b√©o t·ªët, ph√π h·ª£p cho ng∆∞·ªùi g·∫ßy.",
            "name": "Sinh t·ªë b∆° chu·ªëi",
            "category": "tƒÉng c√¢n", 
            "calories": "350"
        },
        {
            "text": "Canh rau c·ªß thanh ƒë·∫°m - √≠t natrium, nhi·ªÅu kali, ph√π h·ª£p cho ng∆∞·ªùi cao huy·∫øt √°p, kh√¥ng ch·ª©a MSG.",
            "name": "Canh rau c·ªß",
            "category": "cao huy·∫øt √°p",
            "calories": "80"
        }
    ]
    
    # Nutrition knowledge data
    nutrition_data = [
        {
            "text": "ƒê·ªÉ gi·∫£m c√¢n hi·ªáu qu·∫£, c·∫ßn t·∫°o th√¢m h·ª•t calo 500-750 calo/ng√†y. ƒÇn nhi·ªÅu rau xanh, protein n·∫°c, h·∫°n ch·∫ø carbohydrate tinh ch·∫ø.",
            "topic": "Gi·∫£m c√¢n",
            "category": "weight_management"
        },
        {
            "text": "Ng∆∞·ªùi tƒÉng c√¢n c·∫ßn ƒÉn th·∫∑ng d∆∞ calo 300-500 calo/ng√†y. T·∫≠p trung v√†o protein ch·∫•t l∆∞·ª£ng cao v√† carbohydrate ph·ª©c t·∫°p.",
            "topic": "TƒÉng c√¢n",
            "category": "weight_management"
        },
        {
            "text": "Ng∆∞·ªùi cao huy·∫øt √°p n√™n h·∫°n ch·∫ø mu·ªëi d∆∞·ªõi 2g/ng√†y, tƒÉng kali t·ª´ rau qu·∫£, tr√°nh th·ª±c ph·∫©m ch·∫ø bi·∫øn s·∫µn.",
            "topic": "Cao huy·∫øt √°p",
            "category": "medical_condition"
        },
        {
            "text": "Ng∆∞·ªùi ti·ªÉu ƒë∆∞·ªùng type 2 n√™n ƒÉn th·ª±c ph·∫©m ch·ªâ s·ªë ƒë∆∞·ªùng huy·∫øt th·∫•p, ki·ªÉm so√°t carbohydrate, tƒÉng ch·∫•t x∆°.",
            "topic": "Ti·ªÉu ƒë∆∞·ªùng",
            "category": "medical_condition"
        }
    ]
    
    # Add recipes to collection
    print("üìã Adding recipes to collection...")
    recipe_texts = [item["text"] for item in recipe_data]
    recipe_embeddings = model.encode(recipe_texts)
    
    recipes_collection.add(
        documents=recipe_texts,
        metadatas=[{"name": item["name"], "category": item["category"], "calories": item["calories"]} for item in recipe_data],
        ids=[f"recipe_{i}" for i in range(len(recipe_data))],
        embeddings=recipe_embeddings.tolist()
    )
    
    # Add nutrition knowledge to collection
    print("üìö Adding nutrition knowledge to collection...")
    nutrition_texts = [item["text"] for item in nutrition_data]
    nutrition_embeddings = model.encode(nutrition_texts)
    
    nutrition_collection.add(
        documents=nutrition_texts,
        metadatas=[{"topic": item["topic"], "category": item["category"]} for item in nutrition_data],
        ids=[f"nutrition_{i}" for i in range(len(nutrition_data))],
        embeddings=nutrition_embeddings.tolist()
    )
    
    print("‚úÖ Data added successfully!")
    
    return model, recipes_collection, nutrition_collection

def test_rag_queries(model, recipes_collection, nutrition_collection):
    """Test RAG queries"""
    print("\nüîç Testing RAG Queries...")
    
    test_queries = [
        "T√¥i mu·ªën gi·∫£m c√¢n, g·ª£i √Ω m√≥n ƒÉn √≠t calo",
        "M√≥n ƒÉn cho ng∆∞·ªùi tƒÉng c√¢n", 
        "Th·ª±c ph·∫©m cho ng∆∞·ªùi cao huy·∫øt √°p",
        "L·ªùi khuy√™n v·ªÅ dinh d∆∞·ª°ng cho ng∆∞·ªùi ti·ªÉu ƒë∆∞·ªùng"
    ]
    
    for query in test_queries:
        print(f"\n‚ùì Query: {query}")
        
        # Generate query embedding
        query_embedding = model.encode([query])
        
        # Search recipes
        recipe_results = recipes_collection.query(
            query_embeddings=query_embedding.tolist(),
            n_results=2
        )
        
        # Search nutrition knowledge
        nutrition_results = nutrition_collection.query(
            query_embeddings=query_embedding.tolist(),
            n_results=2
        )
        
        print("üçΩÔ∏è Recipe Results:")
        if recipe_results['documents'][0]:
            for i, (doc, meta) in enumerate(zip(recipe_results['documents'][0], recipe_results['metadatas'][0])):
                print(f"  {i+1}. {meta['name']} ({meta['calories']} calo)")
                print(f"     {doc[:100]}...")
        else:
            print("  No recipes found")
        
        print("üìö Nutrition Knowledge:")
        if nutrition_results['documents'][0]:
            for i, (doc, meta) in enumerate(zip(nutrition_results['documents'][0], nutrition_results['metadatas'][0])):
                print(f"  {i+1}. {meta['topic']}")
                print(f"     {doc[:100]}...")
        else:
            print("  No nutrition knowledge found")

def generate_rag_response(query, model, recipes_collection, nutrition_collection):
    """Generate comprehensive response using RAG"""
    print(f"\nü§ñ Generating RAG Response for: {query}")
    
    # Get context from both collections
    query_embedding = model.encode([query])
    
    recipe_results = recipes_collection.query(query_embeddings=query_embedding.tolist(), n_results=3)
    nutrition_results = nutrition_collection.query(query_embeddings=query_embedding.tolist(), n_results=2)
    
    # Build context
    context = "TH√îNG TIN T·ª™ C∆† S·ªû D·ªÆ LI·ªÜU:\n\n"
    
    if recipe_results['documents'][0]:
        context += "M√ìN ƒÇN G·ª¢I √ù:\n"
        for doc, meta in zip(recipe_results['documents'][0], recipe_results['metadatas'][0]):
            context += f"- {meta['name']}: {doc}\n"
        context += "\n"
    
    if nutrition_results['documents'][0]:
        context += "KI·∫æN TH·ª®C DINH D∆Ø·ª†NG:\n"
        for doc, meta in zip(nutrition_results['documents'][0], nutrition_results['metadatas'][0]):
            context += f"- {meta['topic']}: {doc}\n"
    
    # Simple response generation (without OpenAI for demo)
    response = f"""
D·ª±a tr√™n c√¢u h·ªèi "{query}", t√¥i c√≥ nh·ªØng g·ª£i √Ω sau:

{context}

üí° L·ªùi khuy√™n: K·∫øt h·ª£p c√°c m√≥n ƒÉn ph√π h·ª£p v·ªõi l·ªùi khuy√™n dinh d∆∞·ª°ng ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u s·ª©c kh·ªèe c·ªßa b·∫°n.
"""
    
    print(response)
    return response

def main():
    """Main demo function"""
    print("üöÄ RAG System Demo - Manual Data")
    
    # Create RAG system
    model, recipes_collection, nutrition_collection = create_simple_rag_demo()
    
    # Test queries
    test_rag_queries(model, recipes_collection, nutrition_collection)
    
    # Generate sample responses
    print("\n" + "="*50)
    print("ü§ñ RAG RESPONSE GENERATION DEMO")
    print("="*50)
    
    demo_queries = [
        "T√¥i mu·ªën gi·∫£m c√¢n, g·ª£i √Ω m√≥n ƒÉn",
        "M√≥n ƒÉn cho ng∆∞·ªùi cao huy·∫øt √°p"
    ]
    
    for query in demo_queries:
        generate_rag_response(query, model, recipes_collection, nutrition_collection)
    
    print("\n‚úÖ RAG Demo completed successfully!")
    print("üí° This demonstrates how RAG retrieves relevant information and generates responses.")

if __name__ == "__main__":
    main()
